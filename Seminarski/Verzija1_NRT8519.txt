 //Marko Dujović, NRT-85/19

#include<iostream>
#include<fstream>
#include<string>

#include<stdio.h>
#include<ctype.h>

#define MAX 80
#define BROJ 30
using namespace std;

//Struktura osoba sadrži podatke za zaposlenog.
//Redosled: ID, Ime, Prezime, Adresa stanovanja, Telefon, Poruka.
struct zaposleni
{
	int idZaposlenog; //idZaposlenog se automatski inkrementira za 1.
	char ime[BROJ + 1], prezime[BROJ + 1], tel[14]; 
	char poruka[100 + 1];
};

struct adresaStanovanja
{
	char imeUlice[BROJ + 1], broj[5], mesto[BROJ + 1], grad[BROJ + 1]; //Broj je char uzimajućji u obzir da broj kuće ili stana može da bude 1A, 2B, 3C itd.
};

void info(char* imeF);

void proveraFajla(char *imeFajla);

void sifrovanje(char *imeF);
void desifrovanje(char *f);

void cezar(char *imeF, int odstup);
void vizner(char *imeF, char * sifra);
void hill(char *imeF, char *sifra);

void unosPodataka(struct zaposleni *osoba, struct adresaStanovanja *adresa, char *imeF, int n);
void izmenaPodataka();


int main()
{
	char c, imeFajla[MAX + 1];
	int i, n;
	zaposleni* bazaZaposlenih;
	adresaStanovanja* bazaMesta;

	//Imenovanje i provera fajla
	cout << "Unesite ime fajla: "; cin.getline(imeFajla, MAX, '\n');
	proveraFajla(imeFajla);

	//Upit za korisnika da unese broj osoba
	do
	{
	cout << "Do koliko clanova ce sadrzati baza?\nNAPOMENA: baza moze da sadrzi do 50 clanova: ";
	cin >> n;
	if (n > 50)
		cout << "Uneli ste prevelik broj!";
	else if (n < 1)
		cout << "Uneli ste premali broj!";
	} 
	while (n < 0 || n > 50);

	cin.ignore();

	bazaZaposlenih = new zaposleni[n];
	if (bazaZaposlenih == NULL) { cerr << "\nGreska u dodeli memorije!"; exit(1); }
	bazaMesta = new adresaStanovanja[n];
	if (bazaMesta == NULL) { cerr << "\nGreska u dodeli memorije!"; exit(1); }
	
	for (i = 0; i < n; i++)
	{
		bazaZaposlenih[i].idZaposlenog = 0;
	}

	//Pocetak unosenja podataka
	unosPodataka(bazaZaposlenih, bazaMesta, imeFajla, n);

	delete[] bazaZaposlenih;
	delete[] bazaMesta;

	cout << "Unos podataka je uspesno zavrsen. Da li zelite da sifrujete unete podatke (D/N): "; cin >> c;

	switch (toupper(c))
	{
	case 'D':
		sifrovanje(imeFajla);
	case 'N':
		cout << "Izlaz iz programa..." << endl;	exit(0);
	default:
		break;
	}
	return 0;
}

void proveraFajla(char *imeFajla)
{
	fstream f;
	char c;
	f.open(imeFajla, ios::in | ios::_Nocreate);
	if (f.is_open())
	{
		cout << "\nUPOZORENJE: Fajl vec postoji!\n";
		f.close();
		do
		{
			cout << "\nDa li zelite da sifrujete (S),\ndesifrujete (D),\nizmenite (I) sadrzaj u koliko nije sifrovan,\nili da obrisete (O) fajl?\n\nUnos: ";
			cin >> c;
		} while (toupper(c) != 'D' && toupper(c) != 'O' && toupper(c) != 'I' && toupper(c) != 'S');
		switch (toupper(c))
		{
		case 'S':
			sifrovanje(imeFajla);
			break;
		case 'D':
			desifrovanje(imeFajla);
			break;
		case 'I':
			izmenaPodataka();
			break;
		case 'O':
			if (remove(imeFajla) != 0)
			{
				cerr << "Neuspesno brisanje fajla!!!";
			}
			else
			{
				cout << "Fajl uspesno obrisan." << endl;
			}
		default:
			break;
		}
		exit(0);
	}
	else
	{
		cout << endl << "Fajl ne postoji." << endl;
		f.clear();
	}
}

/*
 * Upis podataka u datoteku.
 * 
 * osoba o - Struktura tipa osoba, u nju se prvo unose podaci.
 * char *imeF - Ime fajla.
 * int n - broj struktura koji je korisnik naveo.
 */
void unosPodataka(struct zaposleni *osoba, struct adresaStanovanja *adresa, char *imeF, int n)
{
	int i = 0, idZap = 1;
	fstream f;

	//Upis podataka u strukturu:
	do
	{
		osoba[i].idZaposlenog = idZap; //idZap se automatski inkrementira
		cout << "Unos podataka za zaposlenog ciji je ID: " << osoba[i].idZaposlenog << endl;
		cout << "Unesite ime zaposlenog: "; cin.getline(osoba[i].ime, BROJ, '\n');
		cout << "Unesite prezime zaposlenog: "; cin.getline(osoba[i].prezime, BROJ, '\n');
		cout << "Unesite broj telefona: "; cin.getline(osoba[i].tel, 13, '\n');

		//Unos mesta stanovanja:
		cout << "Unos adrese za zaposlenog ciji je ID: " << osoba[i].idZaposlenog << endl;
		cout << "Unesite ime ulice: "; cin.getline(adresa[i].imeUlice, BROJ, '\n');
		cout << "Unesite broj objekta: "; cin.getline(adresa[i].broj, BROJ, '\n');
		cout << "Unesite grad: "; cin.getline(adresa[i].grad, BROJ, '\n');
		cout << "Unesite mesto: "; cin.getline(adresa[i].mesto, BROJ, '\n');

		
		idZap++;
		i++;
	} while (i < n);

	//Upis podataka u fajl:
	f.open(imeF, ios::out | ios::trunc);
	for (i = 0; i < n; i++)
	{
		f << "ID: " << osoba[i].idZaposlenog << endl
			<< "Ime: " << osoba[i].ime << endl
			<< "Prezime: " << osoba[i].prezime << endl
			<< "Broj telefona: " << osoba[i].tel << endl
			<< "Adresa: " << adresa[i].imeUlice << ", " << adresa[i].broj << ", " << adresa[i].grad << ", " << adresa[i].mesto << endl;
		f << endl;
	}

	f.close();

	//Ispis podataka u terminal:
	cout << endl << "ID\tIme\t\tPrezime\t\tTelefon\t\tMesto stanovanja" << endl;
	cout << "" << endl;
	for (i = 0; i < n; i++)
	{
		cout << osoba[i].idZaposlenog << "\t" << osoba[i].ime << "\t\t" << osoba[i].prezime << "\t\t" << osoba[i].tel << "\t\t"
			<< adresa[i].imeUlice << ' ' << adresa[i].broj << ", " << adresa[i].grad << ", " << adresa[i].mesto << endl;
	}
}

void izmenaPodataka() {}

/*
 * Upit za korisnika na koji način želi da šifruje podatke, ili da izbaci informacije o dostupnim vrstana šifrovanja.
 *
 * char *imeF - Ime datoteke koje se prosleđuje drugim funkcijama koje pozivaju ovu funkciju.
 */
void sifrovanje(char* imeF)
{
	char unos;
	int odstup;
	char sifra[MAX];

	cout << endl << "Na koji nacin zelite da sifrujete fajl?\n\n1. Cezarovo sifrovanje\n2. Viznerovo sifrovanje\n3. Hilovo sifrovanje\n\nUnesite redni broj, ili '?' ako zelite da vidite primere sifrovanja: ";
	cin >> unos;
	switch (unos)
	{
	case '1':
		cout << "\nUnesite koliko karaktera ce biti odstup u tekstu: "; cin >> odstup;
		cezar(imeF, odstup);
		break;
	case '2':
		cout << "\nUnesite sifru (Jedna rec): "; cin >> sifra;
		vizner(imeF, sifra); 
		break;
	case '3':
		cout << "\nUnesite sifru (Jedna rec): "; cin >> sifra;
		//hill(imeF, sifra);
		break;
	case '?':
		info(imeF);
		break;
	default:
		break;
	}
}

/*
 * Izbacuje primere šifrovanja u konzolu i vraća program u sifrovanje().
 * 
 * imeF - Ime fajla. Služi samo za vraćanje u funkciju sifrovanje()
 */
void info( char *imeF)
{
	cout << endl;
	cout << "Cezarovo sifrovanje"
		 << "\nSvako slovo teksta koji se sifruje vraca se za n karaktera unazad. Primer:"
		 << "\n\n'The quick brown fox jumps over the lazy dog', sa pomerajem od 3 bice:"
		 <<   "\n'Wkh txlfn eurzq ira mxpsv ryhu wkh odcb grj'";

	cout << "\n\nViznerovo sifrovanje" 
		 << "\nSvako slovo teksta se zamenjuje za sumu odgovarajucih slova iz teksta i sifre. Primer" 
		 << "\n\n'Almost before we knew it, he had left the ground' sa sifrom 'lemon':" 
		 <<   "\n'Lpycfe fqtbci is xyii wg, hi toq wirh gsi sfbfrp'";

	cout << "\n\nHilovo sifrovanje"
		<< "\nSvako slovo teksta i sifre se pretvara u svoju numericku vrednost i postavlja u zasebnu matricu, i zatim se matrice pomnoze. Primer"
		<< "\nTekst 'ACT' i sifra 'GYBNQKURP':"
		<<   "\nkljuc GYBNQKURP ce biti:\t\ttekst ACT ce biti:"
		<< "\n\n|G Y B|   | 6 24  1|" << "    \t\t |A|   | 0|"
		<<   "\n|N Q K| = |13 16 10|" << "    \t\t |C| = | 2|"
		<<   "\n|U R P|   |20 17 15|" << "    \t\t |T|   |19|"
		<< "\n\nKad se ove dve matrice pomnoze dobije se rezultujuca matrica, koja kad se pretvori nazad u tekst dobije se 'POH':"
		<< "\n\n|15|   |P|"
		<<   "\n|14| = |O|"
		<<   "\n| 7|   |H|";
	sifrovanje(imeF);
}


/*
 * Cezaova šifra je vrsta šifrovanja prostog teksta. Tekst se šifruje tako što se svako 
 * slovo teksta menja odgovarajućim znakom koji je pomeren za odgovarajući broj mesta u levo.
 * 
 * imeF - Ime datoteke u kojoj se nalaze podaci
 * odstup - Broj karaktera za koji se vrši odstupanje unazad u tekstu.
 */
void cezar(char *imeF, int odstup)
{
	int i;
	char identifikator = '1';
	int duzina;
	char *tekst;
	fstream f;
	
	//Otvaranje fajla u rezimu citanja, trazenje duzine ukupnog teksta i dodela memorije
	f.open(imeF, ios::in);
	f.seekg(0, ios::end);
	duzina = int(f.tellg());

	tekst = new char[duzina];

	//Vracanje na pocetak fajla i upis u bafer 'tekst'
	f.seekg(0, ios::beg);
	f.read(tekst, duzina);
	f.close();

	//Sifrovanje se deli u tri klase: za velika slova, mala slova i pomoćne znakove, koji se ne menjaju.
	for (i = 0; i < duzina; i++)
	{
		//Sifrovanje velikih slova:
		//Formula E(x) = (x + n) mod 26. 65 i 97 se dodaju zato što se koristi ASCII format, a mod 26 znači da je formula ograničena na 26 karaktera.
		//Dešifrovanje se vrši na sličan način: D(x) = (x - n) mod 26.
		if (isupper(tekst[i]))
		{
			tekst[i] = char(int(tekst[i] + odstup - 65) % 26 + 65); 
		}
		
		//Sifrovanje malih slova
		else if (islower(tekst[i]))
		{
			tekst[i] = char(int(tekst[i] + odstup - 97) % 26 + 97);
		}
	}


	//Upis u fajl
	f.open(imeF, ios::out | ios::trunc);
	
	f.write(tekst, duzina);
	f.put(identifikator);

	f.close();

	delete [] tekst;
}

/*
 * Vižnerova šifra je modifikacija Cezarove šifre.
 */
void vizner(char *imeF, char* sifra)
{
	char identifikator = '2';
	//char tempchar;
	int i, j = 0, duzina;
	char* tekst, *kljuc;
	fstream f;

	f.open(imeF, ios::in);
	f.seekg(0, ios::end);
	duzina = int(f.tellg());

	tekst = new char[duzina];
	kljuc = new char[duzina];

	f.seekg(0, ios::beg);
	f.read(tekst, duzina);

	f.close();
	//Generisanje kljuca uz pomoc sifre
	for (i = 0; i < duzina; i++)
	{
		kljuc[i] = char(sifra[j]);
		if (j == strlen(sifra) - 1)
		{
			j = -1;
		}
		j++;
	}

	for (i = 0; i < duzina; i++)
	{
		if (isupper(tekst[i]))
		{
			if (islower(kljuc[i]))
			{
				kljuc[i] = toupper(kljuc[i]);
			}
			tekst[i] = char(int(tekst[i] + kljuc[i] - 65) % 26 + 65);
		}
		else if (islower(tekst[i]))
		{
			if (isupper(kljuc[i]))
			{
				kljuc[i] = tolower(kljuc[i]);
			}
			tekst[i] = char(int(tekst[i] + kljuc[i] - 97) % 26 + 97);
		}
		else if (isalnum(tekst[i]))
		{
			tekst[i] = int(tekst[i] + kljuc[i] - 48) % 10 + 48;
		}
	}

	//Brisanje sadržaja fajla, upis šifrovanog sadržaja i upis identifikatora
	f.open(imeF, ios::out | ios::trunc);

	f.write(tekst, duzina); 
	f.put(identifikator);

	f.close();

	//Oslobađanje memorije
	delete[] tekst;
	delete[] kljuc;
}

/*
 * Hilovo šifrovanje je zasnovano na matricama. Slova teksta i šifre se pretvaraju u svoje redne brojeve (od 0 do 25 za alfabet), 
 * šifra se ubacuje u n * n matricu, dok se tekst ubacuje u vektorsku matricu(n * 1), gde je n broj clanova vektorske matrice. 
 * Te dve matrice se pomnože i dobije se rezultujuća matrica koja je šifrovan tekst kada se članovi ove matrice pretvore u tekst.
 *
 * imeF - Funkcija dobija ime fajla u kom se nalaze podaci. Ti podaci se šifruju i upisuju u novi fajl.
 * sifra - šifra za šifrovanje podataka.
 */
void hill(char *imeF, char* sifra)
{
	//char identifikator = '3';
}

void desifrovanje(char* imeF)
{
	fstream f;
	char id;

	//Otvara fajl u rezimu za citanje i cita poslednji karakter u fajlu da bi odredio vrstu sifrovanja.
	f.open(imeF, ios::in);
	f.seekg(-1, ios::end);
	f.get(id);

	switch (id)
	{
	case '1':
		cout << "Cezarovo sifrovanje..." << endl;
		break;
	case '2':
		cout << "Viznerovo sifrovanje..." << endl;
		break;
	case '3':
		cout << "Hilovo sifrovanje..." << endl;
		break;
	default:
		cout << "Fajl nije sifrovan!" << endl;
		break;
	}
}
